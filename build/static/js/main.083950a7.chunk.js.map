{"version":3,"sources":["Task/TaskComponent.js","App.js","serviceWorker.js","index.js"],"names":["props","className","index","task","name","onClick","deleteTask","App","state","list","showBlockAddTask","newTaskName","this","setState","newList","push","splice","showBlockAddNewTask","bind","type","onKeyDown","event","key","createNewTask","onChange","target","value","length","map","TaskComponent","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAEe,G,MAAA,SAAAA,GACX,OACI,yBAAKC,UAAU,QACX,2BAAG,8BAAQD,EAAME,MAAQ,EAAtB,KAAH,IAAsCF,EAAMG,KAAKC,MACjD,4BAAQH,UAAU,cAAcI,QAASL,EAAMM,YAA/C,kBCuEGC,E,2MAvEXC,MAAQ,CACJC,KAAM,GACNC,kBAAkB,EAClBC,YAAa,I,qFAIbC,KAAKC,SAAS,CAAEH,kBAAmBE,KAAKJ,MAAME,qB,sCAI9C,IAAMI,EAAO,YAAOF,KAAKJ,MAAMC,MAE/BK,EAAQC,KACJ,CAAEX,KAAMQ,KAAKJ,MAAMG,cAGvBC,KAAKC,SAAS,CACVJ,KAAMK,EACNH,YAAa,GACbD,kBAAkB,M,iCAIfR,GACP,IAAMY,EAAO,YAAOF,KAAKJ,MAAMC,MAC/BK,EAAQE,OAAOd,EAAO,GACtBU,KAAKC,SAAS,CAAEJ,KAAMK,M,+BAGhB,IAAD,OACL,OACI,yBAAKb,UAAU,aACX,wCACI,yBAAKA,UAAU,kBACX,4BAAQI,QAASO,KAAKK,oBAAoBC,KAAKN,OAA/C,cAGR,yBAAKX,UAAU,UACTW,KAAKJ,MAAME,iBACT,yBAAKT,UAAU,gBACX,uDACA,2BACIkB,KAAK,OACLC,UAAY,SAAAC,GACU,UAAdA,EAAMC,KAAiB,EAAKC,iBAEpCC,SAAU,SAAAH,GAAW,EAAKR,SAAS,CAACF,YAAaU,EAAMI,OAAOC,WAClE,4BAAQrB,QAASO,KAAKW,cAAcL,KAAKN,OAAzC,QACK,MAGjB,yBAAKX,UAAU,QACTW,KAAKJ,MAAMC,KAAKkB,OACVf,KAAKJ,MAAMC,KAAKmB,KAAI,SAACzB,EAAMD,GAAP,OACZ,kBAAC2B,EAAD,CACIP,IAAKpB,EACLC,KAAMA,EACND,MAAOA,EACPI,WAAY,EAAKA,WAAWY,KAAK,EAAMhB,QAIjD,uBAAGD,UAAU,cAAb,qB,GAjEZ6B,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.083950a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default props => {\r\n    return(\r\n        <div className=\"task\">\r\n            <p><span>{ props.index + 1 }.</span> {props.task.name }</p>\r\n            <button className=\"delete-item\" onClick={props.deleteTask}>Delete Task</button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport TaskComponent from \"./Task/TaskComponent\";\n\nclass App extends React.Component {\n\n    state = {\n        list: [],\n        showBlockAddTask: false,\n        newTaskName: ''\n    }\n\n    showBlockAddNewTask() {\n        this.setState({ showBlockAddTask: !this.state.showBlockAddTask })\n    }\n\n    createNewTask() {\n        const newList = [...this.state.list]\n\n        newList.push(\n            { name: this.state.newTaskName }\n        )\n\n        this.setState({\n            list: newList,\n            newTaskName: '',\n            showBlockAddTask: false\n        })\n    }\n\n    deleteTask(index) {\n        const newList = [...this.state.list]\n        newList.splice(index, 1)\n        this.setState({ list: newList })\n    }\n\n    render() {\n        return(\n            <div className=\"to-do-app\">\n                <h1>ToDo List\n                    <div className=\"header-buttons\">\n                        <button onClick={this.showBlockAddNewTask.bind(this)}>Add Task</button>\n                    </div>\n                </h1>\n                <div className=\"blocks\">\n                    { this.state.showBlockAddTask ?\n                        <div className=\"add-new-task\">\n                            <label>Enter the name task:</label>\n                            <input\n                                type=\"text\"\n                                onKeyDown={ event => {\n                                    if (event.key === 'Enter') this.createNewTask()\n                                } }\n                                onChange={event => { this.setState({newTaskName: event.target.value}) }} />\n                            <button onClick={this.createNewTask.bind(this)}>Add</button>\n                        </div> : null\n                    }\n                </div>\n                <div className=\"list\">\n                    { this.state.list.length ?\n                            this.state.list.map((task, index) => (\n                                    <TaskComponent\n                                        key={index}\n                                        task={task}\n                                        index={index}\n                                        deleteTask={this.deleteTask.bind(this, index)}\n                                    />\n                                )\n                            )\n                            : <p className=\"none-tasks\">Tasks None.</p> }\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}